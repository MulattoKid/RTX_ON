#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "Defines.glsl"
#include "Camera.glsl"
#include "DataLayouts.glsl"
#include "Sphere.glsl"

layout(set = 0, binding = RT0_ACCELERATION_STRUCTURE_NV_BINDING_LOCATION) uniform accelerationStructureNV scene;
layout(set = 0, binding = RT0_COLOR_IMAGE_BINDING_LOCATION, rgba8) uniform image2D colorImage;
layout(set = 0, binding = RT0_POSITION_IMAGE_BINDING_LOCATION, rgba32f) uniform image2D positionImage;
layout(set = 0, binding = RT0_NORMAL_IMAGE_BINDING_LOCATION, rgba32f) uniform image2D normalImage;
layout(set = 0, binding = RT0_CAMERA_BUFFER_BINDING_LOCATION, std140) uniform cameraBuffer
{
	CameraShader camera;
};
layout(set = 0, binding = RT0_LIGHTS_BUFFER_BINDING_LOCATION, std140) readonly buffer lightBuffer
{
	SphericalLightSource lights[];
};
layout(set = 0, binding = RT0_OTHER_DATA_BUFFER_BINDING_LOCATION, std140) uniform otherDataBuffer
{
	OtherData otherData;
};

layout(location = PRIMARY_PAYLOAD_LOCATION) rayPayloadNV PrimaryRayPayload primaryPayload;
layout(location = SECONDARY_PAYLOAD_LOCATION) rayPayloadNV ShadowRayPayload secondaryPayload;

// Tried linear and power - didn't work well
float PolynomialAOAttenuation(float dist)
{
	// Convert from range [0, MAX_OCCLUSION_DIST] to [0, 1]
	float x = min(dist, MAX_OCCLUSION_DIST) / MAX_OCCLUSION_DIST;
	
	// Function: y = POLYNONIAL_ATTENUATION_Y_MAX - x^POLYNOMIAL_ATTENUATION_POWER
	return POLYNONIAL_AO_ATTENUATION_Y_MAX - pow(x, POLYNOMIAL_AO_ATTENUATION_POWER);
}

void main()
{
	const uint rayFlags = gl_RayFlagsNoneNV;
    const uint cullMask = 0xFF;
    const uint sbtRecordStride = 0;
    const float tMin = 0.0f;
    const float tMax = 100.0f;
	
	// Trace primary ray against acceleration structure
	Ray ray = GenerateRayFromCamera(camera);
    traceNV(scene, rayFlags, cullMask, RT0_PRIMARY_CHIT_IDX, sbtRecordStride, RT0_PRIMARY_MISS_IDX, ray.origin, tMin, ray.dir, tMax, PRIMARY_PAYLOAD_LOCATION);
    // Trace primary ray against light sources
    float lightSourceT = tMax;
    int lightSourceIdx = -1;
    for (int i = 0; i < otherData.numSphericalLightSources; i++)
    {
    	float t = SphereIntersect(lights[i].centerAndRadius.xyz, lights[i].centerAndRadius.w, ray.origin, ray.dir, tMin, tMax);
    	if (t > tMin && t < lightSourceT)
    	{
    		lightSourceT = t;
    		lightSourceIdx = i;
    	}
    }
    
    // Early exit - light hit and its closer than the closest geometry hit
    if (lightSourceIdx > -1 && (lightSourceT < max(primaryPayload.normalAndHitDistance.w, 0.0f) || primaryPayload.normalAndHitDistance.w < 0.0f))
    {
    	imageStore(colorImage, ivec2(gl_LaunchIDNV.xy), vec4(lights[lightSourceIdx].emittance.rgb, 1.0f));
		imageStore(positionImage, ivec2(gl_LaunchIDNV.xy), vec4(0.0f));
		imageStore(normalImage, ivec2(gl_LaunchIDNV.xy), vec4(0.0f));
		return;
    }
    // Early exit - no geometry hit
	else if (primaryPayload.normalAndHitDistance.w < 0.0f)
	{
		//Background color: blue sky-ish
		const float y = float(gl_LaunchIDNV.y) / float(gl_LaunchSizeNV.y);
		const float red = mix(0.0f, 0.7f, y);
		const float green = mix(0.65f, 0.9f, y);
		imageStore(colorImage, ivec2(gl_LaunchIDNV.xy), vec4(red, green, 0.8f, 1.0f));
		imageStore(positionImage, ivec2(gl_LaunchIDNV.xy), vec4(0.0f));
		imageStore(normalImage, ivec2(gl_LaunchIDNV.xy), vec4(0.0f));
		return;
	}
	
	// Intersection data
	float isectDist = primaryPayload.normalAndHitDistance.w;
	vec3 isectPoint = ray.origin + (ray.dir * isectDist);
	vec3 isectNormal = primaryPayload.normalAndHitDistance.xyz;

	vec3 color = vec3(0.0f);
	int numVisible = 0;
	for (int l = 0; l < otherData.numSphericalLightSources; l++)
	{
		vec3 lightCenter = lights[l].centerAndRadius.xyz;
		float lightRadius = lights[l].centerAndRadius.w;
		vec3 lightEmittance = lights[l].emittance.rgb;
		vec3 isectPointToLightCenter = lightCenter - isectPoint;
		vec3 isectPointToLightCenterDir = normalize(isectPointToLightCenter);
		float isectPointToLightCenterDist = length(isectPointToLightCenter);
		float isectPointToLightCenterClosestDist = isectPointToLightCenterDist - lightRadius;

		// Trace shadow rays
		Ray shadowRay = GenerateRay(isectPoint + (isectNormal * 0.001f), isectPointToLightCenterDir);
		traceNV(scene, rayFlags, cullMask, RT0_SECONDARY_CHIT_IDX, sbtRecordStride, RT0_SECONDARY_MISS_IDX, shadowRay.origin, tMin, shadowRay.dir, tMax, SECONDARY_PAYLOAD_LOCATION);
		
		// Check for intersection with geometry before an intersection with the light:
		//    Either didn't hit some geometry or
		//    the distance to the geometry isect is further than the distance to the isect on the light
		if ((secondaryPayload.hitDist.x < 0.0f || secondaryPayload.hitDist.x >= isectPointToLightCenterClosestDist))
		{
			// https://en.wikipedia.org/wiki/Inverse-square_law
			color += lightEmittance * (1.0f / isectPointToLightCenterClosestDist) * dot(isectNormal, isectPointToLightCenterDir);
			numVisible++;
		}
	}
	float fractionOfVisibleLights = float(numVisible) / float(otherData.numSphericalLightSources);
	color *= primaryPayload.materialColor.rgb;
	
	imageStore(colorImage, ivec2(gl_LaunchIDNV.xy), vec4(color, 1.0f));
	//imageStore(colorImage, ivec2(gl_LaunchIDNV.xy), vec4(vec3(fractionOfVisibleLights), 1.0f));
	// NOTE: see that I store the fraction of light rays that were visible in
	// the w component in the positionImage. It is used to avoid performing AO
	// calculations for the entire 
    imageStore(positionImage, ivec2(gl_LaunchIDNV.xy), vec4(isectPoint, fractionOfVisibleLights));
    imageStore(normalImage, ivec2(gl_LaunchIDNV.xy), vec4(isectNormal, 0.0f));
}
