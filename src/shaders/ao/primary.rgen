#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "Defines.glsl"
#include "Camera.glsl"
#include "DataLayouts.glsl"
#include "Geometric.glsl"
#include "Sample.glsl"
#include "Sphere.glsl"

// Sample points to use
#define REGULAR_SAMPLES 0
#define BLUE_NOISE 1
#define GOLDEN_RATIO_SAMPLE 0
#define FIBONACCI_SPIRAL_SAMPLE 0

// Sample method
#define SAMPLE_UNIFORM 0
#define SAMPLE_COSINE 1

// Other
#define SUB_SAMPLE_ISECT_POINT 0
#define BLUE_NOISE_IMAGE_SIZE 64

#if REGULAR_SAMPLES
#else // BLUE_NOISE
struct SamplePoint
{
	float u0;
	float u1;
};
SamplePoint samplePoints[64] =
{
    {0.869141, 0.657227},
    {0.379883, 0.838867},
    {0.349609, 0.327148},
    {0.610352, 0.965820},
    {0.652344, 0.242188},
    {0.127930, 0.654297},
    {0.803711, 0.305664},
    {0.863281, 0.047852},
    {0.058594, 0.240234},
    {0.355469, 0.554688},
    {0.617188, 0.684570},
    {0.385742, 0.095703},
    {0.196289, 0.835938},
    {0.192383, 0.029297},
    {0.538086, 0.458008},
    {0.935547, 0.457031},
    {0.162109, 0.416992},
    {0.933594, 0.852539},
    {0.739258, 0.434570},
    {0.720703, 0.054688},
    {0.245117, 0.196289},
    {0.482422, 0.198242},
    {0.008789, 0.044922},
    {0.333008, 0.684570},
    {0.783203, 0.798828},
    {0.340820, 0.972656},
    {0.775391, 0.177734},
    {0.091797, 0.927734},
    {0.504883, 0.589844},
    {0.561523, 0.818359},
    {0.972656, 0.325195},
    {0.530273, 0.342773},
    {0.086914, 0.528320},
    {0.898438, 0.186523},
    {0.584961, 0.099609},
    {0.437500, 0.466797},
    {0.744141, 0.627930},
    {0.464844, 0.931641},
    {0.068359, 0.747070},
    {0.318359, 0.450195},
    {0.708008, 0.900391},
    {0.419922, 0.731445},
    {0.165039, 0.289062},
    {0.090820, 0.128906},
    {0.194336, 0.547852},
    {0.053711, 0.401367},
    {0.526367, 0.729492},
    {0.657227, 0.356445},
    {0.370117, 0.214844},
    {0.623047, 0.526367},
    {0.948242, 0.963867},
    {0.990234, 0.663086},
    {0.794922, 0.966797},
    {0.282227, 0.887695},
    {0.858398, 0.532227},
    {0.917969, 0.765625},
    {0.674805, 0.784180},
    {0.842773, 0.416016},
    {0.468750, 0.059570},
    {0.435547, 0.374023},
    {0.231445, 0.725586},
    {0.951172, 0.585938},
    {0.228516, 0.346680},
    {0.292969, 0.080078}
};
#endif

layout(set = 0, binding = RT1_ACCELERATION_STRUCTURE_NV_BINDING_LOCATION) uniform accelerationStructureNV scene;
layout(set = 0, binding = RT1_POSITION_IMAGE_BINDING_LOCATION) uniform sampler2D positionImage;
layout(set = 0, binding = RT1_NORMAL_IMAGE_BINDING_LOCATION) uniform sampler2D normalImage;
layout(set = 0, binding = RT1_AO_IMAGE_BINDING_LOCATION, rgba32f) uniform image2D aoImage;
layout(set = 0, binding = RT1_CURRENT_FRAME_BINDING_LOCATION, std140) uniform currentFrameVariableBuffer
{
	uint currentFrame;
};
layout(set = 0, binding = RT1_BLUE_NOISE_IMAGE_BINDING_LOCATION) uniform sampler2D blueNoiseImage;

layout(location = PRIMARY_PAYLOAD_LOCATION) rayPayloadNV ShadowRayPayload primaryPayload;

float VisibilityFunction(float dist)
{
	// y = n^(-x)
#if SAMPLE_UNIFORM
	return pow(2.0f, -dist);
#elif SAMPLE_COSINE
	return pow(32.0f, -dist);
#endif
}

void main()
{
	const uint rayFlags = gl_RayFlagsNoneNV;
    const uint cullMask = 0xFF;
    const uint sbtRecordStride = 0;
    const float tMin = 0.0f;
    const float tMax = 100.0f;
	
	// Intersection data
	vec4 positionFractionVisible = texture(positionImage, vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy));
	vec3 isectPoint = positionFractionVisible.xyz;
	vec3 isectNormal = texture(normalImage, vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy)).xyz;
	// Early exit:
	// 	Either if position is vec3(0.0f), indicating a special case
	// 	Or if at least one of the lights are visible from the point
	if (isectPoint == vec3(0.0f) || positionFractionVisible.w > 0.0f)
	{
		imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(0.0f));
		return;
	}

#if SUB_SAMPLE_ISECT_POINT
	// Calculate the two directions that will be used to "sub-sample" the intersection point
	// Runs the risk of going too far and ending up within some other geometry...
	// 1) Find equation of plane: https://math.stackexchange.com/questions/753113/how-to-find-an-equation-of-the-plane-given-its-normal-vector-and-a-point-on-the?newreg=c41a1becdbb54022a59483dbb1068fea
	vec3 abc = isectNormal;
	float d = dot(isectPoint, isectNormal);
	// 2) Find the largest plane-equation coefficient
	int abcIndex = -1;
	int abcIndexDirOne = -1;
	int abcIndexDirTwo = -1;
	// Get the first that is not 0.0f
	if (abc.x != 0.0f)
	{
		abcIndex = 0;
		abcIndexDirOne = 1;
		abcIndexDirTwo = 2;
	}
	else if (abc.y != 0.0f)
	{
		abcIndex = 1;
		abcIndexDirOne = 0;
		abcIndexDirTwo = 2;
	}
	else
	{
		abcIndex = 2;
		abcIndexDirOne = 0;
		abcIndexDirTwo = 1;
	}
	// 3) Find the two directions: https://math.stackexchange.com/questions/2563909/find-points-on-a-plane
	vec3 pointDirOne = isectPoint;
	pointDirOne[abcIndexDirOne] -= 1.0f;
	float phi = -abc[abcIndexDirOne] / abc[abcIndex];
	pointDirOne[abcIndex] += phi;
	vec3 dirOne = normalize(pointDirOne - isectPoint);
	// dirTwo can be found more efficiantely by taking the cross-product of dirOne and the normal
	vec3 dirTwo = cross(dirOne, isectNormal);
	
	// Constants for sub-sampling occlusion ray's origin
	const float maxOffset = 0.001f;
	const float minOffset = -maxOffset;
#endif

	// AO calculations
	const int numOcclusionSamples = 8;
	const int maxOcclusionSampleIndex = numOcclusionSamples - 1;
	const int totalOcclusionSamples = numOcclusionSamples * numOcclusionSamples;
	float occlusion = 0.0f;
#if BLUE_NOISE
	// Sample degree of rotation
	vec2 blueNoiseUV = gl_LaunchIDNV.xy / vec2(BLUE_NOISE_IMAGE_SIZE);
	float blueNoiseRotationAngle = texture(blueNoiseImage, blueNoiseUV).r;
	blueNoiseRotationAngle = fract(blueNoiseRotationAngle + GOLDEN_RATIO * float(currentFrame));
	blueNoiseRotationAngle *= TWO_PI;
	int sampleCenterX = numOcclusionSamples / 2;
	int sampleCenterY = numOcclusionSamples / 2;
#endif
	for (int y = 0; y < numOcclusionSamples; y++)
	{
		for (int x = 0; x < numOcclusionSamples; x++)
		{
#if SUB_SAMPLE_ISECT_POINT			
			float xFrac = float(x) / float(maxOcclusionStepIndex);
			float yFrac = float(y) / float(maxOcclusionStepIndex);
			vec3 occlusionRayOrigin = isectPoint + (isectNormal * 0.001f) +
									  	(dirOne * mix(minOffset, maxOffset, xFrac)) +
									   	(dirTwo * mix(minOffset, maxOffset, yFrac));
#else
			vec3 occlusionRayOrigin = isectPoint + (isectNormal * 0.001f);
#endif
			
#if BLUE_NOISE
			// Find relative sample coordinates with center in the middle of the sample domain
			vec4 sampleRelative = vec4(x - sampleCenterX, 0.0f, y - sampleCenterY, 1.0f);
			
			// Calculate and apply rotation matrix around y-axis
			mat4 xzPlaneRotation = Rotate(blueNoiseRotationAngle, vec3(0.0f, -1.0f, 0.0f));
			vec4 rotatedSampleRelative = xzPlaneRotation * sampleRelative;
			int rotatedSampleRelativeX = int(round(rotatedSampleRelative.x));
			int rotatedSampleRelativeY = int(round(rotatedSampleRelative.z));
			
			// Move back to original coordinate system
			int rotatedSampleX = rotatedSampleRelativeX + sampleCenterX;
			int rotatedSampleY = rotatedSampleRelativeY + sampleCenterY;
			
			// Wrap each coordinate
			int wrapRotatedSampleX = rotatedSampleX;
			if (wrapRotatedSampleX < 0)
			{
				wrapRotatedSampleX = numOcclusionSamples + wrapRotatedSampleX;
			}
			else if (wrapRotatedSampleX >= numOcclusionSamples)
			{
				wrapRotatedSampleX = numOcclusionSamples - (numOcclusionSamples - wrapRotatedSampleX) - 1;
			}
			int wrapRotatedSampleY = rotatedSampleY;
			if (wrapRotatedSampleY < 0)
			{
				wrapRotatedSampleY = numOcclusionSamples + wrapRotatedSampleY;
			}
			else if (wrapRotatedSampleY >= numOcclusionSamples)
			{
				wrapRotatedSampleY = numOcclusionSamples - (numOcclusionSamples - wrapRotatedSampleY) - 1;
			}
			
			int idxI = wrapRotatedSampleY * numOcclusionSamples + wrapRotatedSampleX;
#else
			int idxI = y * numOcclusionSamples + x;
#endif
			float idx = float(idxI);
			
#if SAMPLE_COSINE
#if BLUE_NOISE
			vec3 occlusionRayDir = SampleHemisphereCosine(isectNormal, vec2(samplePoints[idxI].u0, samplePoints[idxI].u1));
#else // REGULAR_SAMPLES
			vec3 occlusionRayDir = SampleHemisphereCosine(isectNormal, vec2(idx / float(maxOcclusionStepIndex), idx / float(totalOcclusionSamples)));
#endif
#else //SAMPLE_UNIFORM
#if BLUE_NOISE
			vec3 occlusionRayDir = SampleHemisphere(isectNormal, vec2(samplePoints[idxI].u0, samplePoints[idxI].u1));
#else // REGULAR_SAMPLES
			vec3 occlusionRayDir = SampleHemisphere(isectNormal, vec2(idx / float(maxOcclusionStepIndex), idx / float(totalOcclusionSamples)));
#endif
#endif

			traceNV(scene, rayFlags, cullMask, RT1_PRIMARY_CHIT_IDX, sbtRecordStride, RT1_PRIMARY_MISS_IDX, occlusionRayOrigin, tMin, occlusionRayDir, tMax, PRIMARY_PAYLOAD_LOCATION);
						
			// Check for intersection with geometry
			if (primaryPayload.hitDist.x >= 0.0f)
			{

#if SAMPLE_COSINE
				occlusion += VisibilityFunction(primaryPayload.hitDist.x);
#elif SAMPLE_UNIFORM
				occlusion += VisibilityFunction(primaryPayload.hitDist.x) * dot(isectNormal, occlusionRayDir);
#endif
			}
		}
	}
	
	occlusion /= float(totalOcclusionSamples) * ONE_OVER_PI;
	// For safety due to rounding-error: occlusion cannot be more than 1.0f
	occlusion = min(occlusion, 1.0f);
	
	imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(occlusion, 0.0f, 0.0f, 0.0f));
}
