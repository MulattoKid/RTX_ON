#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "Defines.glsl"
#include "Camera.glsl"
#include "DataLayouts.glsl"
#include "Sample.glsl"
#include "Sphere.glsl"

layout(set = 0, binding = RT1_ACCELERATION_STRUCTURE_NV_BINDING_LOCATION) uniform accelerationStructureNV scene;
layout(set = 0, binding = RT1_POSITION_IMAGE_BINDING_LOCATION) uniform sampler2D positionImage;
layout(set = 0, binding = RT1_NORMAL_IMAGE_BINDING_LOCATION) uniform sampler2D normalImage;
layout(set = 0, binding = RT1_AO_IMAGE_BINDING_LOCATION, rgba32f) uniform image2D aoImage;

layout(location = PRIMARY_PAYLOAD_LOCATION) rayPayloadNV ShadowRayPayload primaryPayload;

// Tried linear and power - didn't work well
float PolynomialAOAttenuation(float dist)
{
	// Convert from range [0, MAX_OCCLUSION_DIST] to [0, 1]
	float x = min(dist, MAX_OCCLUSION_DIST) / MAX_OCCLUSION_DIST;
	
	// Function: y = POLYNOMIAL_AO_ATTENUATION_POWER - POLYNOMIAL_AO_ATTENUATION_POWER^x
	return POLYNOMIAL_AO_ATTENUATION_POWER - pow(POLYNOMIAL_AO_ATTENUATION_POWER, x);
}

void main()
{
	const uint rayFlags = gl_RayFlagsNoneNV;
    const uint cullMask = 0xFF;
    const uint sbtRecordStride = 0;
    const float tMin = 0.0f;
    const float tMax = 100.0f;
	
	// Intersection data
	vec4 positionFractionVisible = texture(positionImage, vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy));
	vec3 isectPoint = positionFractionVisible.xyz;
	vec3 isectNormal = texture(normalImage, vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy)).xyz;
	// Early exit - avoid calculating AO
	if (isectPoint == vec3(0.0f) || positionFractionVisible.w == 1.0f)
	{
		imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(DEFAULT_OCCLUSION));
		return;
	}

	// Calculate the two directions that will be used to "sub-sample" the intersection point
	// 1) Find equation of plane: https://math.stackexchange.com/questions/753113/how-to-find-an-equation-of-the-plane-given-its-normal-vector-and-a-point-on-the?newreg=c41a1becdbb54022a59483dbb1068fea
	vec3 abc = isectNormal;
	float d = dot(isectPoint, isectNormal);
	// 2) Find the largest plane-equation coefficient
	int abcIndex = -1;
	int abcIndexDirOne = -1;
	int abcIndexDirTwo = -1;
	vec3 absABC = abs(abc);
	if (abc.x != 0.0f && absABC.x >= absABC.y && absABC.x >= absABC.z)
	{
		abcIndex = 0;
		abcIndexDirOne = 1;
		abcIndexDirTwo = 2;
	}
	else if (abc.y != 0.0f && absABC.y >= absABC.z)
	{
		abcIndex = 1;
		abcIndexDirOne = 0;
		abcIndexDirTwo = 2;
	}
	else if (abc.z != 0.0f)
	{
		abcIndex = 2;
		abcIndexDirOne = 0;
		abcIndexDirTwo = 1;
	}
	else // The largest value is 0.0f
	{
		// Get the first that is not 0.0f
		if (abc.x != 0.0f)
		{
			abcIndex = 0;
			abcIndexDirOne = 1;
			abcIndexDirTwo = 2;
		}
		else if (abc.y != 0.0f)
		{
			abcIndex = 1;
			abcIndexDirOne = 0;
			abcIndexDirTwo = 2;
		}
		// Already checked z
		// else - IS NOT POSSIBLE!!!
	}
	// 3) Find the two directions: https://math.stackexchange.com/questions/2563909/find-points-on-a-plane
	vec3 pointDirOne = isectPoint;
	pointDirOne[abcIndexDirOne] -= 1.0f;
	float phi = -abc[abcIndexDirOne] / abc[abcIndex];
	pointDirOne[abcIndex] += phi;
	vec3 dirOne = normalize(pointDirOne - isectPoint);
	// dirTwo can be found more efficiantely by taking the cross of dirOne and the normal
	vec3 dirTwo = cross(dirOne, isectNormal);
	
	// Constants for sub-sampling occlusion ray's origin
	const float maxOffset = 0.001f;
	const float minOffset = -maxOffset;

	// AO calculations
	const int numOcclusionSteps = 7;
	const int totalOcclusionSamples = numOcclusionSteps * numOcclusionSteps;
	// Sample hemisphere of directions given the normal at the intersection point
	int numAO = 0;
	float attenuation = 0.0f;
	for (int y = 0; y <= numOcclusionSteps; y++)
	{
		for (int x = 0; x <= numOcclusionSteps; x++)
		{
			float xFrac = float(x) / float(numOcclusionSteps);
			float yFrac = float(y) / float(numOcclusionSteps);
			vec3 occlusionRayOrigin = isectPoint + (isectNormal * 0.001f) +
									  	(dirOne * mix(minOffset, maxOffset, xFrac)) +
									   	(dirTwo * mix(minOffset, maxOffset, yFrac));
			//occlusionRayOrigin = isectPoint + (isectNormal * 0.001f);
			
			// Through simple testing with few numOcclusionSteps (e.g. 5), there is very little difference
			// between using SampleHemisphere and SampleHemisphereVaryingZ...
			float idx = y * numOcclusionSteps + x;
			vec3 occlusionRayDir = SampleHemisphere(isectNormal, vec2(idx / float(numOcclusionSteps), idx / float(totalOcclusionSamples)));
			//vec3 occlusionRayDir = SampleHemisphereVaryingZ(isectNormal, samplePoints);
			traceNV(scene, rayFlags, cullMask, RT1_PRIMARY_CHIT_IDX, sbtRecordStride, RT1_PRIMARY_MISS_IDX, occlusionRayOrigin, tMin, occlusionRayDir, tMax, PRIMARY_PAYLOAD_LOCATION);
						
			// Check for intersection with geometry
			if (primaryPayload.hitDist.x >= 0.0f)
			{
				attenuation += PolynomialAOAttenuation(primaryPayload.hitDist.x);
				numAO++;
			}
			else
			{
				attenuation += POLYNONIAL_AO_ATTENUATION_Y_MAX;
			}
		}
	}
	
	// Calculate occlusion
	float occlusion = float(numAO) / float(totalOcclusionSamples);
	// Remember to scale totalOcclusionSamples with the maximum value that a single attenuation sample can give
	attenuation /= float(totalOcclusionSamples) * POLYNONIAL_AO_ATTENUATION_Y_MAX;
	// Factor in attenuation
	occlusion *= attenuation;
	// For safety due to rounding-error: occlusion cannot be more than 1.0f
	occlusion = min(occlusion, 1.0f);
	imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(occlusion, 0.0f, 0.0f, 0.0f));
}
