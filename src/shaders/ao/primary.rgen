#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "Defines.glsl"
#include "Camera.glsl"
#include "DataLayouts.glsl"
#include "Sample.glsl"
#include "Sphere.glsl"

layout(set = 0, binding = RT1_ACCELERATION_STRUCTURE_NV_BINDING_LOCATION) uniform accelerationStructureNV scene;
layout(set = 0, binding = RT1_POSITION_IMAGE_BINDING_LOCATION) uniform sampler2D positionImage;
layout(set = 0, binding = RT1_NORMAL_IMAGE_BINDING_LOCATION) uniform sampler2D normalImage;
layout(set = 0, binding = RT1_AO_IMAGE_BINDING_LOCATION, rgba32f) uniform image2D aoImage;

layout(location = PRIMARY_PAYLOAD_LOCATION) rayPayloadNV ShadowRayPayload primaryPayload;

// Tried linear and power - didn't work well
float PolynomialAOAttenuation(float dist)
{
	// Convert from range [0, MAX_OCCLUSION_DIST] to [0, 1]
	float x = min(dist, MAX_OCCLUSION_DIST) / MAX_OCCLUSION_DIST;
	
	// Function: y = POLYNOMIAL_AO_ATTENUATION_POWER - POLYNOMIAL_AO_ATTENUATION_POWER^x
	return POLYNOMIAL_AO_ATTENUATION_POWER - pow(POLYNOMIAL_AO_ATTENUATION_POWER, x);
}

void main()
{
	const uint rayFlags = gl_RayFlagsNoneNV;
    const uint cullMask = 0xFF;
    const uint sbtRecordStride = 0;
    const float tMin = 0.0f;
    const float tMax = 100.0f;
	
	// Intersection data
	vec4 positionFractionVisible = texture(positionImage, vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy));
	vec3 isectPoint = positionFractionVisible.xyz;
	vec3 isectNormal = texture(normalImage, vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy)).xyz;
	if (isectPoint == vec3(0.0f) || positionFractionVisible.w == 1.0f)
	{
		imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(DEFAULT_OCCLUSION));
		return;
	}

	// AO calculations
	int numOcclusionSteps = 5;
	int totalOcclusionSamples = numOcclusionSteps * numOcclusionSteps;
	// Sample hemisphere of directions given the normal at the intersection point
	int numAO = 0;
	float attenuation = 0.0f;
	for (int i = 0; i <= totalOcclusionSamples; i++)
	{
		// Sample occlusion ray direction and trace
		vec2 samplePoints = vec2(float(i) / float(numOcclusionSteps), float(i) / float(totalOcclusionSamples));
		
		// Through simple testing with few numOcclusionSteps (e.g. 5), there is very little difference
		// between using SampleHemisphere and SampleHemisphereVaryingZ...
		//vec3 occlusionRayDir = SampleHemisphere(isectNormal, samplePoints);
		vec3 occlusionRayDir = SampleHemisphereVaryingZ(isectNormal, samplePoints);
		Ray occlusionRay = GenerateRay(isectPoint + (isectNormal * 0.001f), occlusionRayDir);
		traceNV(scene, rayFlags, cullMask, RT1_PRIMARY_CHIT_IDX, sbtRecordStride, RT1_PRIMARY_MISS_IDX, occlusionRay.origin, tMin, occlusionRay.dir, tMax, PRIMARY_PAYLOAD_LOCATION);
					
		// Check for intersection with geometry
		if (primaryPayload.hitDist.x >= 0.0f)
		{
			attenuation += PolynomialAOAttenuation(primaryPayload.hitDist.x);
			numAO++;
		}
		else
		{
			attenuation += POLYNONIAL_AO_ATTENUATION_Y_MAX;
		}
	}
	// Calculate occlusion
	float occlusion = float(numAO) / float(totalOcclusionSamples);
	// Remember to scale totalOcclusionSamples with the maximum value that a single attenuation sample can give
	attenuation /= float(totalOcclusionSamples) * POLYNONIAL_AO_ATTENUATION_Y_MAX;
	// Factor in attenuation
	occlusion *= attenuation;
	// For safety due to rounding-error: occlusion cannot be more than 1.0f
	occlusion = min(occlusion, 1.0f);
	imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(occlusion, 0.0f, 0.0f, 0.0f));
}
